name: Poll Helldivers API and Cache Data

on:
  schedule:
    # Runs at every 15th minute
    - cron: '*/5 * * * *'

jobs:
  cache-planet-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Install jq for JSON parsing
        run: sudo apt-get install jq

      - name: Fetch War ID
        run: |
          WAR_ID_JSON=$(curl "https://api.live.prod.thehelldiversgame.com/api/WarSeason/current/WarID")
          WAR_ID=$(echo $WAR_ID_JSON | jq '.id')
          echo "WAR_ID=$WAR_ID" >> $GITHUB_ENV

      - name: Fetch Current Campaigns
        run: |
          mkdir -p newData
          RETRY_COUNT=0
          MAX_RETRIES=5
          TEMP_FILE=$(mktemp)

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            RESPONSE=$(curl -s -o "$TEMP_FILE" -w "%{http_code}" \
              -H "User-Agent: WarMonitoriOS/2.1" \
              -H "X-Application-Contact: james@pooledigital.com" \
              "https://helldivers-2-dotnet.fly.dev/api/v1/campaigns")

            if [ "$RESPONSE" = "429" ]; then
              echo "Rate limit exceeded, will retry after 20s."
              sleep 20
              RETRY_COUNT=$((RETRY_COUNT+1))
            else
              if [ "$RESPONSE" -eq 200 ]; then
                mv "$TEMP_FILE" newData/currentCampaigns.json
              else
                rm "$TEMP_FILE"
              fi
              break
            fi
          done

          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Reached maximum retry limit, not updating the file."
            rm "$TEMP_FILE"
          fi

      - name: Move newData files older than 24 hours to 24hourData
        run: |
          mkdir -p newData 24hourData
          current_time=$(date -u +%s)
          
          # Loop through each file in the newData directory
           for file in newData/*_campaigns.json; do
              filename=$(basename "$file")
              timestamp="${filename:0:20}"  # Extracts 'YYYY-MM-DDTHH:MM:SS'
              file_time=$(date -u -d "$timestamp" +%s)
              diff=$(( (current_time - file_time) / 3600 ))

              # Move files older than 24 hours to 24hourData
              if [ "$diff" -gt 24 ]; then
                  echo "Moving $file to 24hourData (older than 24 hours)"
                  mv "$file" "24hourData/"
              fi
          done

      - name: Cleanup files older than 24 hours in 24hourData
        run: |
          current_time=$(date -u +%s)

          # Loop through each file in the 24hourData directory
          for file in 24hourData/*_campaigns.json; do
              filename=$(basename "$file")
              timestamp="${filename:0:20}"  # Extracts 'YYYY-MM-DDTHH:MM:SS'
              file_time=$(date -u -d "$timestamp" +%s)
              diff=$(( (current_time - file_time) / 3600 ))

              # Delete files older than 48 hours
              if [ "$diff" -gt 48 ]; then
                  echo "Deleting $file (older than 48 hours)"
                  rm "$file"
              fi
          done

      - name: Cleanup old data files
        run: |
          # Define the current date and time
          current_time=$(date -u +%s)

          # Loop through each file in the data directory
            for file in data/*_planet_statuses.json; do
              # Extract the timestamp from the filename
              filename=$(basename "$file")
              timestamp="${filename:0:20}"  # Extracts '2024-03-17T02:51:25'

                # Convert timestamp to seconds since the Unix epoch
                file_time=$(date -u -d "$timestamp" +%s)

              # Calculate the difference in hours
              diff=$(( (current_time - file_time) / 3600 ))

              # Check if the difference is greater than 12 hours
              if [ "$diff" -gt 12 ]; then
                  echo "Deleting $file (older than 12 hours)"
                    rm "$file"
              fi
          done

      - name: Commit and push if there are changes
        run: |
           git config --local user.email "action@github.com"
           git config --local user.name "GitHub Actions Bot"
           git add newData/ 24hourData/
           git commit -m "Update data for war season $WAR_ID" -a || echo "No changes to commit"
           git remote set-url origin https://x-access-token:${{ secrets.ACTION_BOT_KEY }}@github.com/devpoole2907/helldivers-api-cache.git
           git push

